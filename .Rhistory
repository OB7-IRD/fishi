avdth_prcwellsample_year_fleet_ocean_final
rbind(avdth_prcwellsample_year_fleet_ocean_final[, 1:5],
avdth_prcwellsample_year_fleet_ocean_final[, c(1:4, 5)])
rbind(avdth_prcwellsample_year_fleet_ocean_final[, 1:5],
avdth_prcwellsample_year_fleet_ocean_final[, c(1:4, 6)])
avdth_prcwellsample_year_fleet_ocean_final <- avdth_prcwellsample_year_fleet_ocean[[1]] %>%
dplyr::full_join(avdth_prcwellsample_year_fleet_ocean[[2]], by = c("fleet", "year_wellsample", "month_wellsample", "ocean"))
avdth_prcwellsample_year_fleet_ocean_final
avdth_prcwellsample_year_fleet_ocean_final <- avdth_prcwellsample_year_fleet_ocean[[1]] %>%
dplyr::full_join(avdth_prcwellsample_year_fleet_ocean[[2]], by = c("fleet", "year_wellsample", "month_wellsample", "ocean")) %>%
dplyr::mutate(wellsample = ifelse(is.na(wellsample),
0,
wellsample),
totwell = ifelse(is.na(totwell),
0,
totwell))
avdth_prcwellsample_year_fleet_ocean_final
?rbind
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5]
tmp
head(avdth_prcwellsample_year_fleet_ocean_final)
head(tmp)
avdth_prcwellsample_year_fleet_ocean_final
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5]
tmp
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5] %>%
mutate(type = "well_sampled")
tmp
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5] %>%
mutate(type = "well_sampled")
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5] %>%
dplyr::mutate(type = "well_sampled")
tmp
# Setup ----
library(devtools)
library(toolbox)
library(ggplot2)
library(DBI)
library(usethis)
library(lintr)
library(fishi)
# Setup ----
library(devtools)
library(toolbox)
devtools::install_github("https://github.com/OB7-IRD/toolbox")
library(toolbox)
library(ggplot2)
library(DBI)
library(usethis)
library(lintr)
devtools::install_github("https://github.com/OB7-IRD/fishi.git",
build_opts = c("--no-resave-data", "--no-manual"))
library(fishi)
config_file <- configuration_file(new_configtype = FALSE,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\12-Indicateurs\\2-Data\\configfile_indicators.csv")
remove.packages("toolbox", lib="~/R/win-library/3.5")
# Setup ----
library(devtools)
devtools::install_github("https://github.com/OB7-IRD/toolbox")
library(toolbox)
library(ggplot2)
library(DBI)
library(usethis)
library(lintr)
devtools::install_github("https://github.com/OB7-IRD/fishi.git",
build_opts = c("--no-resave-data", "--no-manual"))
library(fishi)
?configuration_file
config_file <- configuration_file(new_configtype = FALSE,
config_file <- configuration_file(new_configtype = FALSE,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\12-Indicateurs\\2-Data\\configfile_indicators.csv")
View(config_file)
avdth_connection <- access_dbconnection(jdbc_access_driverclass = config_file[["jdbc_access_driverclass"]],
jdbc_access_driver_loc = config_file[["jdbc_access_driver_loc"]],
access_db_loc = config_file[["access_db_loc"]])
# Functions testing ----
# avdth_nb_landing_year_fleet_ocean
tmp1 <- avdth_nblanding_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet")
library(fishi)
# Functions testing ----
# avdth_nb_landing_year_fleet_ocean
tmp1 <- avdth_nblanding_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet")
?
fishi
remove.packages("fishi", lib="~/R/win-library/3.5")
devtools::install_github("https://github.com/OB7-IRD/fishi.git",
build_opts = c("--no-resave-data", "--no-manual"))
library(fishi)
?fishi
# Setup ----
library(devtools)
library(toolbox)
library(ggplot2)
library(DBI)
library(usethis)
library(lintr)
library(fishi)
?fishi
?avdth_nblanding_year_fleet_ocean
devtools::install_github("https://github.com/OB7-IRD/fishi.git",
build_opts = c("--no-resave-data", "--no-manual"))
library(fishi)
?fishi
# Functions testing ----
# avdth_nb_landing_year_fleet_ocean
tmp1 <- avdth_nblanding_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet")
# avdth_nbset_fishingmode_year_fleet_ocean
tmp2 <- avdth_nbset_fishingmode_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet")
?
avdth_nblanding_year_fleet_ocean
config_file <- configuration_file(new_configtype = FALSE,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\12-Indicateurs\\2-Data\\configfile_indicators.csv")
View(config_file)
avdth_connection <- access_dbconnection(jdbc_access_driverclass = config_file[["jdbc_access_driverclass"]],
jdbc_access_driver_loc = config_file[["jdbc_access_driver_loc"]],
access_db_loc = config_file[["access_db_loc"]])
# Functions testing ----
# avdth_nb_landing_year_fleet_ocean
tmp1 <- avdth_nblanding_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet")
# Functions testing ----
# avdth_nb_landing_year_fleet_ocean
tmp1 <- fishi::avdth_nblanding_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet")
# Setup ----
library(devtools)
devtools::install_github("https://github.com/OB7-IRD/toolbox")
library(toolbox)
library(ggplot2)
library(DBI)
library(usethis)
library(lintr)
devtools::install_github("https://github.com/OB7-IRD/fishi.git",
build_opts = c("--no-resave-data", "--no-manual"))
library(fishi)
config_file <- configuration_file(new_configtype = FALSE,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\12-Indicateurs\\2-Data\\configfile_indicators.csv")
avdth_connection <- access_dbconnection(jdbc_access_driverclass = config_file[["jdbc_access_driverclass"]],
jdbc_access_driver_loc = config_file[["jdbc_access_driver_loc"]],
access_db_loc = config_file[["access_db_loc"]])
avdth_connection
# Functions testing ----
# avdth_nb_landing_year_fleet_ocean
tmp1 <- avdth_nblanding_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet")
tmp1
# avdth_nbset_fishingmode_year_fleet_ocean
tmp2 <- avdth_nbset_fishingmode_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet")
tmp2
# avdth_catches_sp_fishingmode_year_fleet_ocean
tmp3 <- avdth_catches_sp_fishingmode_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet",
fishing_mode = 1)
tmp3
tmp4 <- avdth_catches_sp_fishingmode_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet",
fishing_mode = 1,
specie = c("ALB", "BLT"))
tmp4
library(toolbox)
toolbox
?toolbox
?toolbox
library(fishi)
?fishi
library(toolbox)
library(fishi)
# Configuration file ----
config_file <- configuration_file(new_configtype = FALSE,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\12-Indicateurs\\2-Data\\configfile_indicators.csv")
?choose.dir
choose.dir(default = getwd(),
caption = "Select working directory")
choose.dir <- function() {
system("osascript -e 'tell app \"R\" to POSIX path of (choose folder with prompt \"Choose Folder:\")' > /tmp/R_folder",
intern = FALSE, ignore.stderr = TRUE)
p <- system("cat /tmp/R_folder && rm -f /tmp/R_folder", intern = TRUE)
return(ifelse(length(p), p, NA))
}
a <- choose.dir()
if(is.na(a)) stop("No folder", call. = F)
Sys.info()['sysname']
a=Sys.info()['sysname']
a
Sys.info()['sysname'] == "Windows"
as.character(Sys.info()['sysname'])
as.character(Sys.info()['sysname']) == "Windows"
# Setup ----
devtools::install_github("https://github.com/OB7-IRD/toolbox")
library(toolbox)
# Configuration file ----
config_file <- configuration_file(new_configtype = FALSE,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\12-Indicateurs\\2-Data\\configfile_indicators.csv")
as.character(Sys.info()['sysname']) == "Windows"
as.character(Sys.info()['sysname'])
as.character(Sys.info()['sysname']) == "Windows"
as.character(Sys.info()['sysname']) == "Darwin"
library(toolbox)
# Setup ----
devtools::install_github("https://github.com/OB7-IRD/toolbox")
library(toolbox)
# Configuration file ----
config_file <- configuration_file(new_configtype = FALSE,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\12-Indicateurs\\2-Data\\configfile_indicators.csv")
EnvVar(JAVA_HOME)
?configuration_file
?toolbox
library(toolbox)
?toolbox
library(ggplot2)
library(toolbox)
library(fishi)
# Configuration file ----
config_file <- configuration_file(new_configtype = FALSE,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\12-Indicateurs\\2-Data\\configfile_indicators.csv")
avdth_connection <- access_dbconnection(jdbc_access_driverclass = config_file[["jdbc_access_driverclass"]],
jdbc_access_driver_loc = config_file[["jdbc_access_driver_loc"]],
access_db_loc = config_file[["access_db_loc"]])
# Indicators testing ----
# avdth_nb_landing_year_fleet_ocean
tmp1 <- avdth_nblanding_year_fleet_ocean(avdth_con = avdth_connection,
year = 2017,
fleet = c(1, 41),
ocean = 1,
fleet_name = "french fleet")
?
aes
tmp1
avdth_con=avdth_connection
year=2017
fleet=cc(1,41)
fleet=c(1,41)
ocean=1
fleet_name="french fleet"
# Query importation ----
avdth_prcwellsample_year_fleet_ocean_query <- vector('list', 2)
names(avdth_prcwellsample_year_fleet_ocean_query) <- c("avdth_wellsample_year_fleet_ocean",
"avdth_totwell_year_fleet_ocean")
for (i in 1:length(avdth_prcwellsample_year_fleet_ocean_query)) {
avdth_prcwellsample_year_fleet_ocean_query[[i]] <- paste(readLines(con = paste0("D:\\IRD\\4-Developpement\\1-R\\6-Packages\\fishi\\inst\\sql\\",
names(avdth_prcwellsample_year_fleet_ocean_query)[[i]],
".sql")),
collapse = "\n")
}
# avdth_prcwellsample_year_fleet_ocean_query <- paste(readLines(con = system.file("sql",
#                                                                                     "avdth_prcwellsample_year_fleet_ocean.sql",
#                                                                                     package = "fishi")),
#                                                         collapse = "\n")
# Value(s) interpolation(s) ----
for (i in 1:length(avdth_prcwellsample_year_fleet_ocean_query)) {
avdth_prcwellsample_year_fleet_ocean_query[[i]] <- toolbox::sql_inset(db_type = "access",
replacement = year,
pattern = "year_interpolate",
query = avdth_prcwellsample_year_fleet_ocean_query[[i]])
avdth_prcwellsample_year_fleet_ocean_query[[i]] <- toolbox::sql_inset(db_type = "access",
replacement = fleet,
pattern = "fleet_interpolate",
query = avdth_prcwellsample_year_fleet_ocean_query[[i]])
avdth_prcwellsample_year_fleet_ocean_query[[i]] <- toolbox::sql_inset(db_type = "access",
replacement = ocean,
pattern = "ocean_interpolate",
query = avdth_prcwellsample_year_fleet_ocean_query[[i]])
}
# Data importation ----
avdth_prcwellsample_year_fleet_ocean <- vector('list', 2)
names(avdth_prcwellsample_year_fleet_ocean) <-names(avdth_prcwellsample_year_fleet_ocean_query)
for (i in 1:length(avdth_prcwellsample_year_fleet_ocean)) {
avdth_prcwellsample_year_fleet_ocean[[i]] <- DBI::dbGetQuery(avdth_con,
avdth_prcwellsample_year_fleet_ocean_query[[i]])
}
# Data design ----
avdth_prcwellsample_year_fleet_ocean_final <- avdth_prcwellsample_year_fleet_ocean[[1]] %>%
dplyr::full_join(avdth_prcwellsample_year_fleet_ocean[[2]], by = c("fleet", "year_wellsample", "month_wellsample", "ocean")) %>%
dplyr::mutate(wellsample = ifelse(is.na(wellsample),
0,
wellsample),
totwell = ifelse(is.na(totwell),
0,
totwell))
avdth_prcwellsample_year_fleet_ocean_final
avdth_prcwellsample_year_fleet_ocean_final
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5] %>%
dplyr::mutate(type = "well_sampled")
tmp
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5] %>%
dplyr::mutate(type = "well_sampled") %>%
dplyr::rename(nbwell = wellsample)
tmp
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5] %>%
dplyr::mutate(type = "well_sampled") %>%
dplyr::rename(nbwell = totwell) %>%
tmp
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5] %>%
dplyr::mutate(type = "well_sampled") %>%
dplyr::rename(totwell = wellsample)
tmp
tmp <- avdth_prcwellsample_year_fleet_ocean_final[, 1:5] %>%
dplyr::mutate(type = "well_sampled") %>%
dplyr::rename(totwell = wellsample) %>%
rbind(avdth_prcwellsample_year_fleet_ocean_final[, c(1:4, 6)])
?
rbind
devtools::install_github("https://github.com/ldbk/CLEFRDB", build_opts = c("--no-resave-data", "--no-manual"))
devtools::install_github("https://github.com/ldbk/CLEFRDB", build_opts = c("--no-resave-data", "--no-manual"))
remotes::install_github("https://github.com/ldbk/CLEFRDB", build_opts = c("--no-resave-data", "--no-manual"))
remotes::install_github("https://github.com/ldbk/CLEFRDB", build_opts = c("--no-resave-data", "--no-manual"))
install.packages("devtools")
remotes::install_github("https://github.com/ldbk/CLEFRDB", build_opts = c("--no-resave-data", "--no-manual"))
install.packages("knitr")
remotes::install_github("https://github.com/ldbk/CLEFRDB", build_opts = c("--no-resave-data", "--no-manual"))
library(CLEFRDB)
?CLEFRDB
devtools::install_github("https://github.com/OB7-IRD/toolbox")
print(Timetype)
hauldate<-as.POSIXct(strptime("2011-03-27 01:30:03", "%Y-%m-%d %H:%M:%S"))
new("Time",TimeType="date",TimeDate=hauldate)
CLEFRDB
?CLEFRDB
install.packages("lintr")
# Setup ----
library(devtools)
install_github("https://github.com/OB7-IRD/toolbox")
library(toolbox)
install_github("https://github.com/OB7-IRD/fishi.git", build_opts = c("--no-resave-data", "--no-manual"))
library(fishi)
library(dplyr)
?toolbox
config_file <- configuration_file()
config_file <- configuration_file(new_configtype = F,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\3-ADD\\2-FDI\\2019\\3-Data\\configfile_FDI2019.csv")
View(config_file)
# Databases connections ----
balbaya_con <- db_connection(db_user = config_file[["balbaya_user"]],
db_password = config_file[["balbaya_password"]],
db_dbname = config_file[["balbaya_dbname"]],
db_host = config_file[["balbaya_host"]],
db_port = config_file[["balbaya_port"]])
# Databases connections ----
balbaya_con <- db_connection(db_user = config_file[["balbaya_user"]],
db_password = config_file[["balbaya_password"]],
db_dbname = config_file[["balbaya_dbname"]],
db_host = config_file[["balbaya_host"]],
db_port = config_file[["balbaya_port"]])
View(balbaya_con)
View(config_file)
config_file[["queries_loc"]]
# Table A: Catch summary
balbaya_landing_query <- readLines(con = file.path(config_file[["queries_loc"]], "balbaya_landing.sql", fsep = "\\"))
balbaya_landing_query
# Table A: Catch summary
balbaya_landing_query <- paste(readLines(con = file.path(config_file[["queries_loc"]], "balbaya_landing.sql",
fsep = "\\")),
collapse = '\n')
balbaya_landing_query
balbaya_landing <- dbGetQuery(balbaya_con, balbaya_landing_query)
source('D:/IRD/5-Projets_&_themes/3-ADD/2-FDI/2019/4-Scripts/Fisheries_Dependent_Information_data_call_2019.R', echo=TRUE)
install.packages(RPostgreSQL)
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
# Setup ----
library(devtools)
install_github("https://github.com/OB7-IRD/toolbox")
library(toolbox)
library(dplyr)
library(RPostgreSQL)
config_file <- configuration_file(new_configtype = F,
path_configtype = "D:\\IRD\\5-Projets_&_themes\\3-ADD\\2-FDI\\2019\\3-Data\\configfile_FDI2019.csv")
# Databases connections ----
balbaya_con <- db_connection(db_user = config_file[["balbaya_user"]],
db_password = config_file[["balbaya_password"]],
db_dbname = config_file[["balbaya_dbname"]],
db_host = config_file[["balbaya_host"]],
db_port = config_file[["balbaya_port"]])
# Table A: Catch summary
balbaya_landing_query <- paste(readLines(con = file.path(config_file[["queries_loc"]], "balbaya_landing.sql",
fsep = "\\")),
collapse = '\n')
balbaya_landing <- dbGetQuery(balbaya_con, balbaya_landing_query)
# Table A: Catch summary
balbaya_landing_query <- paste(readLines(con = file.path(config_file[["queries_loc"]], "balbaya_landing.sql",
fsep = "\\")),
collapse = '\n')
balbaya_landing <- dbGetQuery(balbaya_con, balbaya_landing_query)
View(balbaya_landing)
save.image("C:/Users/mdepetri/Desktop/antoine_suck.RData")
?sp::over
install.packages("sp")
install.packages("maptools")
install.packages("raster")
install.packages("rgdal")
install.packages("rgeos")
sp::over
?sp::over
tmp <- rgdal::readOGR(file.path("D:\\IRD\\4-Developpement\\1-R\\6-Packages\\toolbox\\inst\\fao_area",
"FAO_AREAS.shp",
fsep = "\\"))
?readOGR
tmp <- rgdal::readOGR(dsn = file.path("D:\\IRD\\4-Developpement\\1-R\\6-Packages\\toolbox\\inst\\fao_area",
"FAO_AREAS.shp",
fsep = "\\"))
summary(tmp)
overlay_level = "MAJOR"
tmp_sub <- tmp[tmp$F_LEVEL == overlay_level, ]
data=balbaya_landing
?coordinates
longitude_name="longitude"
latitude_name="latitude"
# Data design ----
sp::coordinates(data) <- c(longitude_name,
latitude_name)
sp::proj4string(data) <- sp::CRS(sp::proj4string(tmp_sub))
data
summary(data)
?over
summary(tmp)
overlay_level = "major"
upper(overlay_level)
toupper(overlay_level)
?toupper
proj4string(tmp_sub)
sp::proj4string(tmp_sub)
# Data design ----
sp::coordinates(data) <- c(longitude_name,
latitude_name)
rm(data)
data=balbaya_landing
# Data design ----
sp::coordinates(data) <- c(longitude_name,
latitude_name)
sp::proj4string(data) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
overlay_level = "subarea"
# Data spatial overlay
if (overlay_level == "major") {
accuracy <- "F_AREA"
} else {
if (overlay_level == "subarea") {
accuracy <- c("F_AREA", "F_SUBAREA")
} else {
if (overlay_level == "division") {
accuracy <- c("F_AREA", "F_SUBAREA", "F_DIVISION")
} else {
if (overlay_level == "subdivision") {
accuracy <- c("F_AREA", "F_SUBAREA", "F_DIVISION", "F_SUBDIVIS")
} else {
if (overlay_level == "subunit") {
accuracy <- c("F_AREA", "F_SUBAREA", "F_DIVISION", "F_SUBDIVIS", "F_SUBUNIT")
}
}
}
}
}
accuracy
step="F_AREA"
tmp_sub <- tmp[tmp$F_LEVEL == toupper(overlay_level), ]
overlay_level
accuracy
tmp_sub <- tmp[tmp$F_LEVEL == step, ]
step
accuracy
accuracy
overlay_level == "major"
# Fao area shapefile importation ----
tmp <- rgdal::readOGR(dsn = file.path("D:\\IRD\\4-Developpement\\1-R\\6-Packages\\toolbox\\inst\\fao_area",
"FAO_AREAS.shp",
fsep = "\\"))
tmp <- rgdal::readOGR(dsn = system.file("fao_area",
"FAO_AREAS.shp",
package = "toolbox"))
# Data design ----
sp::coordinates(data) <- c(longitude_name,
latitude_name)
data=balbaya_con
# Data design ----
sp::coordinates(data) <- c(longitude_name,
latitude_name)
sp::proj4string(data) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
